{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"42agpFGA5UbS","executionInfo":{"status":"ok","timestamp":1740097717567,"user_tz":300,"elapsed":129532,"user":{"displayName":"Jeffrey Davis","userId":"06181929862488685479"}},"outputId":"3dfb0a86-c64b-4082-9c5c-beafdfc77a1b"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","# Generate 1000 random bits\n","# num_bits = 1000000\n","# bits = np.random.randint(0, 2, num_bits)\n","\n","# #  Define transmission voltage based on power\n","# power = 10**-7  # recived power\n","\n","# voltage = np.sqrt(power)  # Voltage representation (from professor's notes)\n","# threshold = voltage/2  # Detection threshold at half the voltage\n","##########################################################################################################\n","#this is to get the voltage printed and the threshold voltage                                            #\n","##########################################################################################################\n","# print(\"voltage\",voltage)\n","# print(\"threshold voltage\",threshold)\n","\n","# Multiply bits by voltage\n","# transmitted_signal = bits * voltage  # 0 remains 0, 1 becomes transmitted voltage\n","\n","#  Generate Gaussian noise with proper variance\n","# noise_variance = power / 20  # sign to noise ratio 10log(signal power/noise power)\n","###########################################################################################################\n","#notice the higher the the DB level the higher the accuracy  for the bits being transmiited               #\n","###########################################################################################################\n","\n","###################################################################################################################\n","# this function will generate 1000 random bits                                                                    #\n","# the 0 is were the noise is center around becasue google said mean in a commucation system is center around zero #\n","# np.s is the deviation that was define from above                                                                #\n","# numb_bit is the size of the generated function                                                                  #\n","###################################################################################################################\n","# noise = np.random.normal(0, np.sqrt(noise_variance), num_bits)  # Proper scaling of noise\n","\n","\n","# Display first 100 noise values or 10% of the toltal transmittet bis\n","#print(\"Generated Noise (First 100 samples):\", noise[:100])\n","\n","######################################################################################################################\n","# Gaussian noise to a transmitted signal simulating how real-world signals get affected by noise during transmission #\n","######################################################################################################################\n","# received_signal = transmitted_signal + noise\n","\n","#  Detection threshold\n","# decoded_bits = (received_signal >= threshold).astype(int)  # Logical operation for decision\n","\n","# Compute Bit Error Rate (BER)\n","# bit_errors = np.sum(decoded_bits != bits)# calcuates the total number of bit errors\n","# ber = bit_errors / num_bits # diving the total erros by total bits\n","\n","# Display results\n","#print(\"Transmitted Bits:\", bits[:20])  # Show first 20 transmitted bits\n","#print(\"Received Signal:\", received_signal[:20])  # Show first 20 received signals\n","#print(\"Decoded Bits:\", decoded_bits[:20])  # Show first 20 decoded bits\n","# print(f\"Total Bit Errors: {bit_errors}\")\n","# print(f\"Bit Error Rate (BER): {ber:.5f}\")\n","\n","\n","num_bits = 100000000\n","# bits = np.random.randint(0, 2, num_bits)\n","\n","#  Define transmission voltage based on power\n","power = 10**-7  # recived power\n","\n","voltage = np.sqrt(power)  # Voltage representation (from professor's notes)\n","amplitude = voltage  # Detection threshold at half the voltage\n","#num_bits = 100000  # Total bits for improved accuracy\n","snr_db_values = np.arange(0, 20, 2)  # SNR in dB steps of 2\n","ber_results = []  # Store BER values\n","\n","# Loop SNR values\n","########################################################################################################################\n","# this loop will iterate throught each SNR value                                                                       #\n","# each interation will have a new value assign from them snr_db_value to the snr_db                                    #\n","########################################################################################################################\n","for snr_db in snr_db_values:\n","    snr_linear = (10**(snr_db /10))  # SNR dB to linear and take the reciprocal to inver the SNR value\n","    # h = np.sqrt(snr_linear)  # channel gain H\n","    noise_var = power/snr_linear\n","\n","    # Generate bits\n","    ####################################################################################################################\n","    # Each element is either a 1 or a 0                                                                                #\n","    ####################################################################################################################\n","    bits = np.random.randint(0, 2, num_bits)# created an array\n","    transmitted_signal = np.where(bits == 0, amplitude, -amplitude) # 0 is +1 and 1 is -1\n","\n","    # Generate noise: n = (1/sqrt(2)) * random(0,1) + j (1/sqrt(2)) * random(0,1)\n","    noise_real = (1 / np.sqrt(2)) * np.random.normal(0,np.sqrt(noise_var),num_bits)\n","\n","    # print(noise_real)\n","    noise_imag = (1 / np.sqrt(2)) * np.random.normal(0,np.sqrt(noise_var),num_bits)\n","\n","    # print(noise_imag)\n","\n","    # input()\n","    ####################################################################################################################\n","    # 1/h is scaling the noise                                                                                         #\n","    # dividing by H increase the noise as SNR decases                                                                  #\n","    # to keep the noise to signal relationship                                                                         #\n","    #Lower SNR weaker the single , Higher the SNR the lower the noise variance                                         #\n","    ####################################################################################################################\n","    noise =(noise_real + 1j * noise_imag)  # Complex Gaussian noise\n","    # print(noise)\n","    # input()\n","    # output signal and reception (y = hx + n)\n","    received_signal = transmitted_signal + noise\n","\n","    # print(received_signal)\n","    # input()\n","\n","    # Take real part only\n","    #####################################################################################################################\n","    # going to recive the single and going to ignor any imaginary =j and the number attached with j                     #\n","    #####################################################################################################################\n","    received_signal_real = np.real(received_signal)\n","    # print(received_signal_real)\n","    # input()\n","\n","    # Decode bits\n","    #######################################################################################################################\n","    # compaire each number of bits received to 0                                                                          #\n","    # converts boolean array 1= true , 0= false                                                                           #\n","    # if we recive a less then 0 it is a 1                                                                                #\n","    # if we recive a greater then or equal to 0 it is a 0                                                                 #\n","    #######################################################################################################################\n","    decoded_bits = (received_signal_real < 0).astype(int)\n","\n","    # print(decoded_bits)\n","\n","    # Bit Error Rate (BER)\n","    bit_errors = np.sum(decoded_bits != bits)# boolean array 1= true , 0= false count the number of true\n","    bers = bit_errors / num_bits# calulate the number of bit erros / number of bit transmited\n","    ber_results.append(bers)# stores BERs values\n","\n","    # print(ber_results)\n","\n","\n","    # print(f\"SNR (dB): {snr_db}, BER: {ber:.10f}\")\n","# input()\n","# Plot BER vs. SNR\n","plt.figure()\n","plt.semilogy(snr_db_values, ber_results, marker='o', linestyle='-')\n","plt.xlabel(\"SNR (dB)\")\n","plt.ylabel(\"Bit Error Rate (BER)\")\n","plt.title(\"BER vs. SNR for BPSK over AWGN\")\n","\n","plt.grid(True, which='both')\n","\n","plt.show()"]}]}